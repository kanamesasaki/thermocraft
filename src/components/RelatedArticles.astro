---
import { getCollection } from 'astro:content';
import {
  getLangFromUrl,
  useTranslations,
  getCollectionName,
  getLocalizedPath,
} from '../utils/i18n';

interface Props {
  currentSlug: string;
  currentTags?: string[];
}

const { currentSlug, currentTags = [] } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get all articles for the current language
const allArticles = await getCollection(getCollectionName(lang));

// Find related articles based on shared tags
const relatedArticles = allArticles
  .filter(article => article.slug !== currentSlug)
  .map(article => {
    const tags: string[] = Array.isArray(article.data.tags) ? article.data.tags : [];
    const sharedCount = currentTags.length
      ? tags.filter(tag => currentTags.includes(tag)).length
      : 0;
    return { article, sharedCount };
  })
  .filter(item => item.sharedCount > 0)
  .sort((a, b) => {
    if (b.sharedCount !== a.sharedCount) return b.sharedCount - a.sharedCount;
    return b.article.data.pubDate.getTime() - a.article.data.pubDate.getTime();
  })
  .slice(0, 3)
  .map(item => item.article);

// If no related articles by tags, show recent articles
const recentArticles =
  relatedArticles.length > 0
    ? relatedArticles
    : allArticles
        .filter(article => article.slug !== currentSlug)
        .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
        .slice(0, 3);

const articlesPath = getLocalizedPath('/articles', lang);
---

{
  recentArticles.length > 0 && (
    <section class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
      <h2 class="text-2xl font-bold mb-6">
        {relatedArticles.length > 0 ? t('posts.related') : t('posts.recent')}
      </h2>
      <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {recentArticles.map(article => (
          <article class="border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-lg transition-shadow">
            <h3 class="font-semibold mb-2">
              <a
                href={`${articlesPath}/${article.slug}/`}
                class="text-blue-600 dark:text-blue-400 hover:underline"
              >
                {article.data.title}
              </a>
            </h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm mb-2">{article.data.description}</p>
            <time class="text-xs text-gray-500 dark:text-gray-400">
              {article.data.pubDate.toLocaleDateString(lang === 'ja' ? 'ja-JP' : 'en-US')}
            </time>
          </article>
        ))}
      </div>
    </section>
  )
}

---
import { getLangFromUrl, useTranslations } from '../utils/i18n';

interface Props {
  title: string;
}

const { title } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const url = Astro.url.href;

const text = `${title}`;

// Prebuild share URLs for platforms
const xShare = new URL('https://twitter.com/intent/tweet');
xShare.searchParams.set('text', text);
xShare.searchParams.set('url', url);

const linkedinShare = new URL('https://www.linkedin.com/shareArticle');
linkedinShare.searchParams.set('mini', 'true');
linkedinShare.searchParams.set('url', url);
linkedinShare.searchParams.set('title', title);
---

<div class="mt-8 mb-8">
  <div class="flex items-center gap-3 flex-wrap">
    <span class="text-sm text-gray-600 dark:text-gray-400">{t('share.title')}:</span>

    <!-- Web Share API button -->
    <button
      type="button"
      class="inline-flex items-center gap-2 rounded-md border border-gray-300 dark:border-gray-700 px-3 py-1.5 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 transition"
      aria-label={t('share.share')}
      id="web-share-btn"
    >
      <!-- Share icon -->
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="currentColor"
        class="h-4 w-4"
        ><path
          d="M13.5 5.25a2.25 2.25 0 1 1 .9 1.8l-5.2 2.6a2.25 2.25 0 0 1 0 2.7l5.2 2.6a2.25 2.25 0 1 1-.66 1.32l-5.2-2.6a2.25 2.25 0 1 1 0-3.96l5.2-2.6a2.25 2.25 0 0 1-.24-1.86Z"
        ></path></svg
      >
      <span>{t('share.share')}</span>
    </button>

    <!-- X (Twitter) -->
    <a
      href={xShare.toString()}
      target="_blank"
      rel="noopener noreferrer"
      class="inline-flex items-center gap-2 rounded-md border border-gray-300 dark:border-gray-700 px-3 py-1.5 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 transition"
      aria-label={t('share.x')}
    >
      <!-- X icon -->
      <svg aria-hidden="true" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4"
        ><path
          d="M18.244 2H21l-6.47 7.39L22.5 22h-6.656l-5.2-6.78L3.8 22H1l6.91-7.9L1.5 2h6.78l4.71 6.18L18.244 2Zm-2.33 18h1.73L7.17 4H5.34l10.57 16Z"
        ></path></svg
      >
      <span>X</span>
    </a>

    <!-- LinkedIn -->
    <a
      href={linkedinShare.toString()}
      target="_blank"
      rel="noopener noreferrer"
      class="inline-flex items-center gap-2 rounded-md border border-gray-300 dark:border-gray-700 px-3 py-1.5 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 transition"
      aria-label={t('share.linkedin')}
    >
      <!-- LinkedIn icon -->
      <svg aria-hidden="true" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4"
        ><path
          d="M4.983 3.5C4.983 4.88 3.88 6 2.5 6S0 4.88 0 3.5 1.12 1 2.5 1 4.983 2.12 4.983 3.5ZM.24 8.25h4.52V23H.24V8.25Zm7.56 0h4.33v2.01h.06c.6-1.14 2.06-2.35 4.23-2.35 4.52 0 5.35 2.97 5.35 6.83V23h-4.52v-7.34c0-1.75-.03-4-2.44-4-2.44 0-2.82 1.9-2.82 3.86V23H7.8V8.25Z"
        ></path></svg
      >
      <span>LinkedIn</span>
    </a>

    <!-- Copy link -->
    <button
      type="button"
      class="inline-flex items-center gap-2 rounded-md border border-gray-300 dark:border-gray-700 px-3 py-1.5 text-sm hover:bg-gray-50 dark:hover:bg-gray-800 transition"
      aria-label={t('share.copy')}
      id="copy-link-btn"
      data-url={url}
    >
      <!-- Link icon -->
      <svg aria-hidden="true" viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4"
        ><path
          d="M14 7h2a5 5 0 1 1 0 10h-2v-2h2a3 3 0 1 0 0-6h-2V7Zm-4 10H8a5 5 0 1 1 0-10h2v2H8a3 3 0 1 0 0 6h2v2Zm1-8h2v6h-2V9Z"
        ></path></svg
      >
      <span>{t('share.copy')}</span>
    </button>

    <span id="copy-status" class="text-xs text-green-600 dark:text-green-400 hidden"
      >{t('share.copied')}</span
    >
  </div>

  <script define:vars={{ shareTitle: title, shareUrl: url }}>
    const webShareBtn = document.getElementById('web-share-btn');
    const copyBtn = document.getElementById('copy-link-btn');
    const status = document.getElementById('copy-status');

    if (webShareBtn && !('share' in navigator)) {
      // If Web Share API isn't supported, visually de-emphasize or hide the button
      webShareBtn.style.display = 'none';
    }

    webShareBtn?.addEventListener('click', async () => {
      try {
        if ('share' in navigator) {
          await navigator.share({ title: shareTitle, text: shareTitle, url: shareUrl });
        }
      } catch (e) {
        // Silently ignore if user cancels
      }
    });

    copyBtn?.addEventListener('click', async () => {
      const link = shareUrl || window.location?.href;
      try {
        await navigator.clipboard.writeText(link || '');
        if (status) {
          status.classList.remove('hidden');
          setTimeout(() => status.classList.add('hidden'), 2000);
        }
      } catch (e) {
        // Fallback: prompt
        const ok = window.prompt('Copy link', link || '');
      }
    });
  </script>
</div>
